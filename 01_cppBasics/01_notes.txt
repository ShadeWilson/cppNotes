Learn C++
Chapter 1: C++ Basics
Notes by Shade Wilson
From LearnCpp.com
Oct 18, 2016

########## 1.1 ###############
Statements in C++ are terminated with a ; (dont forget!!)
All variables must be declared before they can be used

Helpful hint: Itâ€™s a good idea to put your main() function in
a .cpp file named either main.cpp, or with the same name as your project.
For example, if you are writing a Chess game, you could put your main()
function in chess.cpp.

One of the most commonly used parts of the C++ standard library is
is the iostream library, which contains functionality to write/read
to/from the screen

Compile and run helloWorld:
shadewilson $ g++ -o helloWorld helloWorld.cpp
shadewilson $ ./helloWorld

########### 1.2 - Comments #############
/* This is a multi-line /* comment */ this is not inside the comment */
// The above comment ends at the first */, not the second */

Comments do not nest

########### 1.3 - A first look at variables, initialization, assignment
an object is a piece of memory that can be used to store values

In order to create a variable, we generally use a special kind of declaration
statement called a definition

Ex:
int x;

When the CPU executes this statement, a piece of memory from RAM will
be set aside (instantiation). Let's say x is assigned memory location 140

x = 5;
std::cout << x;  // prints the value of x (memory location 140) to the console

In C++, variables are all l-values: a value that has a persistent
address in memory. L comes from the fact than l-values can only be
on the left side of an assignment statement

The opposite of l-values are r-valuesL refer to variables that are not associated
with a persistent memory address. Ex: 5 or expressions like x + 2. They
are generally temporary in nature and discarded at the end of the statement
where they occur.

Examples:
int y;      // define y as an integer variable
y = 4;      // r-value 4 evaluates to 4, which is then assigned to l-value y
y = 2 + 5;  // r-value 2 + r-value 5 evaluates to r-value 7, which is then assigned to l-value y

int x;      // define x as an integer variable
x = y;      // l-value y evaluates to 7 (from before), which is then assigned to l-value x.
x = x;      // l-value x evaluates to 7, which is then assigned to l-value x (useless!)
x = x + 1;  // l-value x + r-value 1 evaluate to r-value 8, which is then assigned to l-value x.

INITIALIZATION vs. ASSIGNMENT

After a variable is defined, a value may be assigned to it via "="
int x; // this is a variable definition
x = 5; // assign the value 5 to variable x

C++ lets you define a var and assign an initial value in one step (initialization)
int x = 5; // initialize variable x with the value 5

Rule: When giving variables an initial value, favor initialization over assignment.

Caution: uninitialized variables take on any value the was previously
assigned to that memory location (garbage)!
